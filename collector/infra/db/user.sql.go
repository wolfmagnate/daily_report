// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const findCandidates = `-- name: FindCandidates :many
SELECT
    u.id AS u_id,
    u.last_collected_at AS u_last_collected_at,
    u.github_id AS u_github_id,
    u.github_username AS u_github_username,
    gi.access_token AS gi_access_token,
    gi.refresh_token AS gi_refresh_token,
    gi.scopes AS gi_scopes,
    gi.last_processed_event_id AS gi_last_processed_event_id,
    si.access_token AS si_access_token,
    si.refresh_token AS si_refresh_token,
    si.scopes AS si_scopes,
    si.slack_user_id AS si_slack_user_id,
    si.team_id AS si_team_id,
    ARRAY_AGG(sic.channel_id) AS si_channel_ids
FROM
    users u
LEFT JOIN
    github_integrations gi ON u.id = gi.user_id
LEFT JOIN
    slack_integrations si ON u.id = si.user_id
LEFT JOIN
    slack_integration_channels sic ON si.id = sic.slack_integration_id
WHERE
    u.id NOT IN ($1)
GROUP BY
    u.id, gi.id, si.id
ORDER BY
    u.last_collected_at ASC
LIMIT
    $2
`

type FindCandidatesParams struct {
	ExcludeIds []int64
	Lim        int32
}

type FindCandidatesRow struct {
	UID                    int64
	ULastCollectedAt       int64
	UGithubID              int32
	UGithubUsername        string
	GiAccessToken          []byte
	GiRefreshToken         []byte
	GiScopes               pgtype.Text
	GiLastProcessedEventID pgtype.Text
	SiAccessToken          []byte
	SiRefreshToken         []byte
	SiScopes               pgtype.Text
	SiSlackUserID          pgtype.Text
	SiTeamID               pgtype.Text
	SiChannelIds           interface{}
}

func (q *Queries) FindCandidates(ctx context.Context, arg FindCandidatesParams) ([]FindCandidatesRow, error) {
	rows, err := q.db.Query(ctx, findCandidates, arg.ExcludeIds, arg.Lim)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindCandidatesRow
	for rows.Next() {
		var i FindCandidatesRow
		if err := rows.Scan(
			&i.UID,
			&i.ULastCollectedAt,
			&i.UGithubID,
			&i.UGithubUsername,
			&i.GiAccessToken,
			&i.GiRefreshToken,
			&i.GiScopes,
			&i.GiLastProcessedEventID,
			&i.SiAccessToken,
			&i.SiRefreshToken,
			&i.SiScopes,
			&i.SiSlackUserID,
			&i.SiTeamID,
			&i.SiChannelIds,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
