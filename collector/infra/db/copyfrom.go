// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: copyfrom.go

package db

import (
	"context"
)

// iteratorForCreateGithubActivities implements pgx.CopyFromSource.
type iteratorForCreateGithubActivities struct {
	rows                 []CreateGithubActivitiesParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateGithubActivities) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateGithubActivities) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].UserID,
		r.rows[0].EventID,
		r.rows[0].Type,
		r.rows[0].Url,
		r.rows[0].RepositoryName,
		r.rows[0].Payload,
		r.rows[0].CreatedAt,
	}, nil
}

func (r iteratorForCreateGithubActivities) Err() error {
	return nil
}

func (q *Queries) CreateGithubActivities(ctx context.Context, arg []CreateGithubActivitiesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"github_activities"}, []string{"user_id", "event_id", "type", "url", "repository_name", "payload", "created_at"}, &iteratorForCreateGithubActivities{rows: arg})
}

// iteratorForCreateSlackActivities implements pgx.CopyFromSource.
type iteratorForCreateSlackActivities struct {
	rows                 []CreateSlackActivitiesParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateSlackActivities) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateSlackActivities) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].UserID,
		r.rows[0].SlackUserID,
		r.rows[0].Message,
		r.rows[0].Url,
		r.rows[0].ChannelID,
		r.rows[0].MessageTimestamp,
		r.rows[0].CreatedAt,
	}, nil
}

func (r iteratorForCreateSlackActivities) Err() error {
	return nil
}

func (q *Queries) CreateSlackActivities(ctx context.Context, arg []CreateSlackActivitiesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"slack_activities"}, []string{"user_id", "slack_user_id", "message", "url", "channel_id", "message_timestamp", "created_at"}, &iteratorForCreateSlackActivities{rows: arg})
}
