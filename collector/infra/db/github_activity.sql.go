// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: github_activity.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type CreateGithubActivitiesParams struct {
	UserID         int64
	EventID        string
	Type           string
	Url            string
	RepositoryName pgtype.Text
	Payload        []byte
	CreatedAt      int64
}

const updateGithubIntegrationLastProcessedEventID = `-- name: UpdateGithubIntegrationLastProcessedEventID :exec
UPDATE github_polling_states
SET last_processed_event_id = $1, updated_at = $2
WHERE user_id = $3
`

type UpdateGithubIntegrationLastProcessedEventIDParams struct {
	LastProcessedEventID pgtype.Text
	UpdatedAt            int64
	UserID               int64
}

func (q *Queries) UpdateGithubIntegrationLastProcessedEventID(ctx context.Context, arg UpdateGithubIntegrationLastProcessedEventIDParams) error {
	_, err := q.db.Exec(ctx, updateGithubIntegrationLastProcessedEventID, arg.LastProcessedEventID, arg.UpdatedAt, arg.UserID)
	return err
}

const updateGithubIntegrationToken = `-- name: UpdateGithubIntegrationToken :exec
UPDATE github_integrations
SET access_token = $1, refresh_token = $2, updated_at = $3
WHERE user_id = $4
`

type UpdateGithubIntegrationTokenParams struct {
	AccessToken  []byte
	RefreshToken []byte
	UpdatedAt    int64
	UserID       int64
}

func (q *Queries) UpdateGithubIntegrationToken(ctx context.Context, arg UpdateGithubIntegrationTokenParams) error {
	_, err := q.db.Exec(ctx, updateGithubIntegrationToken,
		arg.AccessToken,
		arg.RefreshToken,
		arg.UpdatedAt,
		arg.UserID,
	)
	return err
}
