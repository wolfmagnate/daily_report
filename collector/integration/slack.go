package integration

import (
	"context"
	"fmt"
	"os"
	"time"

	"github.com/slack-go/slack"
	"github.com/wolfmagnate/daily_report/collector/domain"
	"golang.org/x/oauth2"
)

type SlackIntegrator interface {
	GetUserMessages(ctx context.Context, slackIntegration *domain.SlackIntegration, userID domain.UserID, lastCollectedAt time.Time) ([]*domain.SlackActivity, bool, *oauth2.Token, error)
}

type slackIntegrator struct {
	Conf *oauth2.Config
}

func NewSlackIntegrator() SlackIntegrator {
	return &slackIntegrator{
		Conf: &oauth2.Config{
			ClientID:     os.Getenv("SLACK_CLIENT_ID"),
			ClientSecret: os.Getenv("SLACK_CLIENT_SECRET"),
			Endpoint: oauth2.Endpoint{
				TokenURL: "https://slack.com/api/oauth.v2.access",
			},
		},
	}
}

func (si *slackIntegrator) GetUserMessages(ctx context.Context, slackIntegration *domain.SlackIntegration, userID domain.UserID, lastCollectedAt time.Time) ([]*domain.SlackActivity, bool, *oauth2.Token, error) {
	tokenSource := si.Conf.TokenSource(ctx, slackIntegration.Token)
	newToken, err := tokenSource.Token()
	if err != nil {
		return nil, false, nil, fmt.Errorf(`failed to retrieve token from token source: %w`, err)
	}

	client := slack.New(newToken.AccessToken)
	var activities []*domain.SlackActivity

	// ここをみればslackIntegrationのフィールドがdomainに閉じられない（命じろが無理）と分かる
	// 汎用的なデータ構造の中身を必要とする汎用的でない処理が存在する
	for _, channelID := range slackIntegration.IntegratedChannelIDs {
		params := &slack.GetConversationHistoryParameters{
			ChannelID: channelID,
			Oldest:    fmt.Sprintf("%d", lastCollectedAt.Unix()),
		}
		history, err := client.GetConversationHistory(params)
		if err != nil {
			continue
		}

		for _, message := range history.Messages {
			if message.User == string(slackIntegration.SlackUserID) {
				url, err := client.GetPermalink(&slack.PermalinkParameters{
					Channel: channelID,
					Ts:      message.Timestamp,
				})
				if err != nil {
					continue
				}
				createdAt, err := time.Parse(time.RFC1123, message.Timestamp)
				if err != nil {
					continue
				}
				activity, err := domain.NewSlackActivity(
					0, // ID will be generated by the database
					userID,
					slackIntegration.SlackUserID,
					message.Text,
					url,
					channelID,
					message.Timestamp,
					createdAt.Unix(),
				)
				if err != nil {
					continue
				}
				activities = append(activities, activity)
			}
		}
	}

	if slackIntegration.Token.AccessToken == newToken.AccessToken {
		return activities, false, nil, nil
	}

	return activities, true, newToken, nil
}
